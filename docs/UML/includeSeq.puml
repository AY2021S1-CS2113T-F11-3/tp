@startuml
!include style.puml

box Logic LOGIC_COLOR_T1
participant ":IncludeCommand" as I LOGIC_COLOR
end box

box Ui UI_COLOR_T1
participant "ui:Ui" as U UI_COLOR
end box

box Storage STORAGE_COLOR_T1
participant "storage:Storage" as S STORAGE_COLOR
participant ":StorageWrite" as SW STORAGE_COLOR
participant ":StorageLoad" as SL STORAGE_COLOR
end box

skinparam sequence {
  GroupBodyBackgroundColor Transparent
}

-> I : execute()
activate I
    I -> I : attemptToInclude()
    activate I
    alt if type equals "chapter"
        I -> I : removeChapterFromExclusion
        activate I
            I -> U : getIncludedModuleName
            activate U
            U --> I : moduleName
            deactivate U
            I -> U : getIncludedChapterName
            activate U
            U --> I : chapterName
            deactivate U
            I -> S : removeChapterFromExclusionFile()
            activate S
                S -> SW : removeChapterFromExclusionFile()
                activate SW
                    SW -> SL : loadExclusionFile()
                    activate SL
                    SL --> SW : excludedChapters
                    deactivate SL
                    SW -> SW : deleteEntryInExcludedChapters()
                    activate SW
                    deactivate SW
                    SW -> SW : updateExclusionFile()
                    activate SW
                    deactivate SW
                SW --> S
                deactivate SW
            S --> I
            deactivate S
        deactivate I
    else if type equals "module"
        I -> I : removeChapterFromExclusion
        activate I
            I -> U : getIncludedModuleName
            activate U
            U --> I : moduleName
            deactivate U
            I -> S : removeModuleFromExclusionFile()
            activate S
                S -> SW : removeModuleFromExclusionFile()
                activate SW
                    SW -> SL : loadExclusionFile()
                    activate SL
                    SL --> SW : excludedChapters
                    deactivate SL
                    SW -> SL : loadChaptersFromSpecifiedModule()
                    activate SL
                    SL --> SW : chaptersInModule
                    deactivate SL
                    loop for chapter in chaptersInModule
                    SW -> SW : deleteEntryInExcludedChapters(chapter)
                    activate SW
                    deactivate SW
                    end
                    SW -> SW : updateExclusionFile()
                    activate SW
                    deactivate SW
                SW --> S
                deactivate SW
            S --> I
            deactivate S
        deactivate I
    end
deactivate I
@enduml
