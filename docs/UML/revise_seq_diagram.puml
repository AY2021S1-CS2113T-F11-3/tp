@startuml
!include style.puml

box Logic LOGIC_COLOR_T1
participant ":ReviseCommand" as ReviseCommand LOGIC_COLOR
participant ":Scheduler" as Scheduler LOGIC_COLOR
participant ":HistoryCommand" as HistoryCommand LOGIC_COLOR
end box

box Model MODEL_COLOR_T1
participant ":Access" as Access MODEL_COLOR
participant ":Module" as Module MODEL_COLOR
participant ":Chapter" as Chapter MODEL_COLOR
participant ":ChapterList" as ChapterList MODEL_COLOR
end box

box Ui UI_COLOR_T1
participant ":Ui" as Ui UI_COLOR
end box

box Storage STORAGE_COLOR_T1
participant ":Storage" as Storage STORAGE_COLOR
end box

[-> ReviseCommand : execute(ui, access, storage)
activate ReviseCommand
ref over ReviseCommand, ChapterList : Get Chapter
[<-[hidden]- ReviseCommand
ref over ReviseCommand, Ui : Chapter is not due for revision
[<-[hidden]- ReviseCommand

ref over ReviseCommand, Chapter: Get Cards
ReviseCommand -> Ui : showToUser(cardCount)
activate Ui
ReviseCommand <-- Ui
deactivate Ui
ReviseCommand -> Ui : showToUser(message)
activate Ui
ReviseCommand <-- Ui
deactivate Ui
loop all cards
    ReviseCommand -> ReviseCommand : reviseCard(count, c, ui, repeatCards)
    activate ReviseCommand
    ReviseCommand -> ReviseCommand : rateCard(ui, repeatCards, c, input)
    activate ReviseCommand
    deactivate ReviseCommand
    ReviseCommand --> ReviseCommand : count
    deactivate ReviseCommand
end
ReviseCommand -> ReviseCommand : repeatRevision(ui, repeatCards, count)
activate ReviseCommand
deactivate ReviseCommand
ReviseCommand -> Ui : showToUser(message)
activate Ui
ReviseCommand <-- Ui
deactivate Ui
ReviseCommand -> Scheduler : computeDeckDeadline(cards)
activate Scheduler
ReviseCommand <-- Scheduler : date
deactivate Scheduler
[<-[hidden]- Scheduler
destroy Scheduler
ReviseCommand -> Chapter : setDueBy(date, storage, access)
activate Chapter
ReviseCommand <-- Chapter
deactivate Chapter
[<-[hidden]- Chapter
destroy Chapter
ReviseCommand -> Storage : saveCards(cards, module, chapter)
activate Storage
ReviseCommand <-- Storage
deactivate Storage
ReviseCommand -> HistoryCommand : addHistory(ui, access, storage, reviseIndex)
activate HistoryCommand
ReviseCommand <-- HistoryCommand
deactivate HistoryCommand
[<-[hidden]- HistoryCommand
destroy HistoryCommand
[<-- ReviseCommand
deactivate ReviseCommand
@enduml